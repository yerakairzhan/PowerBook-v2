// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
insert into users (userid, username) values ($1, $2)
`

type CreateUserParams struct {
	Userid   string `json:"userid"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Userid, arg.Username)
	return err
}

const deleteUserState = `-- name: DeleteUserState :exec
update users set state = null where userid = $1
`

func (q *Queries) DeleteUserState(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, deleteUserState, userid)
	return err
}

const getLanguage = `-- name: GetLanguage :one
select language from users where userid = $1
`

func (q *Queries) GetLanguage(ctx context.Context, userid string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getLanguage, userid)
	var language sql.NullString
	err := row.Scan(&language)
	return language, err
}

const getUserReged = `-- name: GetUserReged :one
select registered from users where userid = $1
`

func (q *Queries) GetUserReged(ctx context.Context, userid string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, getUserReged, userid)
	var registered sql.NullBool
	err := row.Scan(&registered)
	return registered, err
}

const getUserState = `-- name: GetUserState :one
SELECT state FROM users WHERE userid = $1
`

func (q *Queries) GetUserState(ctx context.Context, userid string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserState, userid)
	var state sql.NullString
	err := row.Scan(&state)
	return state, err
}

const getUsersWithoutReadingToday = `-- name: GetUsersWithoutReadingToday :many
SELECT u.userid, u.language
FROM users u
         LEFT JOIN reading_logs r
                   ON u.userid = r.userid AND r.date = CURRENT_DATE
WHERE u.registered = TRUE AND r.userid IS NULL
`

type GetUsersWithoutReadingTodayRow struct {
	Userid   string         `json:"userid"`
	Language sql.NullString `json:"language"`
}

func (q *Queries) GetUsersWithoutReadingToday(ctx context.Context) ([]GetUsersWithoutReadingTodayRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWithoutReadingToday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithoutReadingTodayRow
	for rows.Next() {
		var i GetUsersWithoutReadingTodayRow
		if err := rows.Scan(&i.Userid, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setLanguage = `-- name: SetLanguage :exec
update users set language = $2 where userid = $1
`

type SetLanguageParams struct {
	Userid   string         `json:"userid"`
	Language sql.NullString `json:"language"`
}

func (q *Queries) SetLanguage(ctx context.Context, arg SetLanguageParams) error {
	_, err := q.db.ExecContext(ctx, setLanguage, arg.Userid, arg.Language)
	return err
}

const setUserReged = `-- name: SetUserReged :exec
update users set registered = true where userid = $1
`

func (q *Queries) SetUserReged(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, setUserReged, userid)
	return err
}

const setUserState = `-- name: SetUserState :exec
update users set state = $2 where userid = $1
`

type SetUserStateParams struct {
	Userid string         `json:"userid"`
	State  sql.NullString `json:"state"`
}

func (q *Queries) SetUserState(ctx context.Context, arg SetUserStateParams) error {
	_, err := q.db.ExecContext(ctx, setUserState, arg.Userid, arg.State)
	return err
}
